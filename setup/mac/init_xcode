#!/usr/bin/env bash

# BSD 3-Clause License
#
# Copyright (c) 2025, Massachusetts Institute of Technology.
# Copyright (c) 2025, Toyota Research Institute.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its
#    contributors may be used to endorse or promote products derived from
#    this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

set -euxo pipefail

feedback () {
  echo -n $'\033[32m'
  echo "$0"
  echo -n $'\033[00m'
}

die () {
  echo >&2 "$@"
}

pull_xcode_or_clt () {
  local file="$1"
  shift

  local full_version="$1"
  shift

  local hash_expect="$1"
  shift

  local destination="$1"
  shift

  if ! [ -f "$destination" ]; then
    die "Please place the $file at $destination before running this script"
  fi

  local destdir
  destdir="$( dirname "$destination" )"
  readonly destdir

  local destfile
  destfile="$( basename "$destination" )"
  readonly destfile

  feedback "Verifying the $file..."
  echo "$hash_expect  $destfile" > "$destination.sha256sum"
  sha256sum --check "$destination.sha256sum"
}

# Succeeds if the first argument is vercmp-greater-or-equal-to the second
# argument.
version_is_at_least () {
  local lhs="$1"
  shift

  local rhs="$1"
  shift

  local lower
  lower="$( printf "%s\n%s" "$lhs" "$rhs" | \
    sort --version-sort | \
    head --lines=1 )"
  readonly lower

  # Second is "lower", so the first is at least its value, therefore succeed.
  if [ "$lower" -eq "$rhs" ]; then
    return 0
  fi
  return 1
}

readonly version="$1"
shift || die "'version' argument is required"

curdir="$( dirname "$0" )"
readonly curdir

readonly xcode_hashes="$curdir/xcode_hashes.csv"

feedback "Pulling metadata from the file..."
cat "$xcode_hashes"
xcode_full_version="$(
  grep --fixed-strings "$version," "$xcode_hashes" | \
    cut -d, -f2 )"
readonly xcode_full_version
xcode_hash_expect="$(
  grep --fixed-strings "$version," "$xcode_hashes" | \
    cut -d, -f3 )"
readonly xcode_hash_expect
clt_hash_expect="$(
  grep --fixed-strings "$version," "$xcode_hashes" | \
    cut -d, -f4 )"
# TODO(tyler-yankee): Add parsing for multiple default OS versions for a
# given Xcode version.
os_version_default="$(
  grep --fixed-strings "$version," "$xcode_hashes" | \
    cut -d, -f5 )"
readonly os_version_default

feedback "Verifying the metadata is present..."
if [ -z "$xcode_full_version" ]; then
  die "Unknown installer version for version '$version'"
fi
if [ -z "$xcode_hash_expect" ]; then
  die "Unknown installer hash for version '$version'"
fi
if [ -z "$clt_hash_expect" ]; then
  die "Unknown command line tools hash for version '$version'"
fi

feedback "Checking if Xcode is already installed..."
readonly xcode_root="/Applications/Xcode-$version.app"
if ! [ -d "$xcode_root/Contents/Developer" ]; then
  readonly installer_loc="Xcode_$version.xip"
  readonly clt_loc="Command_Line_Tools_for_Xcode_$version.dmg"

  feedback "Fetching the installer and command line tools..."
  pull_xcode_or_clt "Xcode installer" \
    "$xcode_full_version" "$xcode_hash_expect" "$installer_loc"
  pull_xcode_or_clt "Command Line Tools" \
    "$xcode_full_version" "$clt_hash_expect" "$clt_loc"

  feedback "Installing command line tools..."
  # Finish any pending filesystem operations before `hdiutil`.
  sync
  hdiutil attach "$clt_loc"
  readonly clt_volume="/Volumes/Command Line Developer Tools"
  readonly clt_pkg="$clt_volume/Command Line Tools.pkg"
  sudo installer -package "$clt_pkg" -target /
  sync
  hdiutil detach "$clt_volume"

  feedback "Extracting the installer..."
  sudo xip -x "$installer_loc"

  if ! [ -d "Xcode.app" ]; then
    die "Failed to extract the Xcode application"
  fi

  feedback "Removing the installer and command line tools..."
  rm "$installer_loc" "$clt_loc"

  feedback "Moving Xcode application..."
  sudo mv -v "Xcode.app" "$xcode_root"

  feedback "Selecting the installed Xcode..."
  sudo xcode-select --switch "$xcode_root"

  mac_major_version="$(sw_vers -productVersion | awk -F '.' '{print $1}')"
  readonly mac_major_version
  if [ "$mac_major_version" -eq "$os_version_default" ]; then
    feedback "Linking the installed Xcode to the default /Applications/Xcode.app..."
    ln -sf "$xcode_root" /Applications/Xcode.app
  fi
fi

feedback "Performing first-run tasks..."
readonly xcode_developer="$xcode_root/Contents/Developer"
readonly xcode_resources="$xcode_root/Contents/Resources"

feedback "Accepting the license..."
sudo "$xcode_developer/usr/bin/xcodebuild" -license accept

feedback "Checking first-launch status..."
if ! env DEVELOPER_DIR="$xcode_developer" xcodebuild -checkFirstLaunchStatus; then
  feedback "Running first-launch setup..."
  sudo env DEVELOPER_DIR="$xcode_developer" xcodebuild -runFirstLaunch
fi

feedback "Building a list of packages to install..."
packages=(
  CoreTypes # Xcode 14+
)

feedback "Checking for XcodeSystemResources version..."
xsr_version="$( pkgutil --pkg-info com.apple.pkg.XcodeSystemResources | \
  sed -n -e '/version/s/version: //p' )"
readonly xsr_version
if version_is_at_least "$xsr_version" "$version"; then
  packages+=("XcodeSystemResources")
fi

readonly packages

# Install the needed packages.
for package in "${packages[@]}"; do
  package_path="$xcode_resources/Packages/$package.pkg"
  if ! [ -f "$package_path" ]; then
    feedback "WARNING: Missing installer for the '$package' package"
    continue
  fi

  feedback "Installing $package package..."
  sudo /usr/sbin/installer -dumplog -verbose \
    -pkg "$package_path" \
    -target /
done

# Set the derived data location to be relative. This keeps files that Xcode
# makes in the CI directories that get cleaned up rather than accumulating
# system-wide.
feedback "Setting DerivedData location..."
defaults write com.apple.dt.Xcode IDECustomDerivedDataLocation .XcodeDerivedData
