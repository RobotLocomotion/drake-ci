# Set base configuration
set(CTEST_USE_LAUNCHERS ON)
set(ENV{CTEST_USE_LAUNCHERS_DEFAULT} 1)

set(DASHBOARD_COVERAGE OFF)
set(DASHBOARD_MEMCHECK OFF)
set(DASHBOARD_LINK_WHAT_YOU_USE OFF)

set(DASHBOARD_BUILD_DOCUMENTATION OFF)
set(DASHBOARD_LONG_RUNNING_TESTS OFF)

if(DOCUMENTATION OR DOCUMENTATION STREQUAL "publish")
  set(DASHBOARD_BUILD_DOCUMENTATION ON)
endif()

if(NOT DEFINED ENV{ghprbPullId})
  set(DASHBOARD_LONG_RUNNING_TESTS ON)
endif()

# Include additional configuration information
include(${DASHBOARD_DRIVER_DIR}/configurations/packages.cmake)
include(${DASHBOARD_DRIVER_DIR}/configurations/timeout.cmake)

if(NOT MINIMAL AND NOT OPEN_SOURCE AND NOT COMPILER STREQUAL "cpplint")
  include(${DASHBOARD_DRIVER_DIR}/configurations/aws.cmake)
endif()

# Set up diagnostic tools
if(COMPILER STREQUAL "include-what-you-use")
  include(${DASHBOARD_DRIVER_DIR}/configurations/include-what-you-use.cmake)
elseif(COMPILER STREQUAL "link-what-you-use")
  include(${DASHBOARD_DRIVER_DIR}/configurations/link-what-you-use.cmake)
elseif(COMPILER STREQUAL "scan-build")
  include(${DASHBOARD_DRIVER_DIR}/configurations/scan-build.cmake)
endif()

if(COVERAGE)
  include(${DASHBOARD_DRIVER_DIR}/configurations/coverage.cmake)
endif()

if(MEMCHECK MATCHES "^([amt]san|valgrind)$")
  include(${DASHBOARD_DRIVER_DIR}/configurations/memcheck.cmake)
endif()

# Clean out the old builds and/or installs
file(REMOVE_RECURSE "${CTEST_BINARY_DIRECTORY}")
file(MAKE_DIRECTORY "${CTEST_BINARY_DIRECTORY}")
file(REMOVE_RECURSE "${DASHBOARD_INSTALL_PREFIX}")

# Prepare initial cache
cache_flag(C_FLAGS STRING)
cache_flag(CXX_FLAGS STRING)
cache_flag(CXX_STANDARD STRING EXTRA "CMAKE_CXX_STANDARD_REQUIRED:BOOL=ON")
cache_flag(FORTRAN_FLAGS STRING NAMES CMAKE_Fortran_FLAGS)
cache_flag(STATIC_LINKER_FLAGS STRING)
cache_flag(SHARED_LINKER_FLAGS STRING NAMES
  CMAKE_EXE_LINKER_FLAGS
  CMAKE_SHARED_LINKER_FLAGS)
cache_flag(INCLUDE_WHAT_YOU_USE STRING NAMES
  CMAKE_C_INCLUDE_WHAT_YOU_USE
  CMAKE_CXX_INCLUDE_WHAT_YOU_USE)
cache_flag(LINK_WHAT_YOU_USE BOOL)
cache_flag(POSITION_INDEPENDENT_CODE BOOL)
cache_flag(INSTALL_PREFIX PATH)
cache_flag(VERBOSE_MAKEFILE BOOL)
cache_append(BUILD_DOCUMENTATION BOOL ${DASHBOARD_BUILD_DOCUMENTATION})
cache_append(BUILD_DOCUMENTATION_ALWAYS BOOL ${DASHBOARD_BUILD_DOCUMENTATION})
cache_append(LONG_RUNNING_TESTS BOOL ${DASHBOARD_LONG_RUNNING_TESTS})
cache_append(SKIP_DRAKE_BUILD BOOL ON)

# Report build configuration
report_configuration(".38
  ==================================== ENV
  CC
  CCC_CC
  CCC_CXX
  CXX
  F77
  FC
  ==================================== ENV
  GTEST_DEATH_TEST_USE_FORK
  ==================================== ENV
  ROS_DISTRO
  ROS_ETC_DIR
  ROS_HOME
  ROS_MASTER_URI
  ROS_PACKAGE_PATH
  ROS_ROOT
  ==================================== >DASHBOARD_
  UNIX
  UNIX_DISTRIBUTION
  UNIX_DISTRIBUTION_VERSION
  APPLE
  ====================================
  CMAKE_VERSION
  ==================================== >DASHBOARD_ <CMAKE_
  C_FLAGS
  CXX_FLAGS
  CXX_STANDARD
  FORTRAN_FLAGS
  INSTALL_PREFIX
  INCLUDE_WHAT_YOU_USE
  LINK_WHAT_YOU_USE
  POSITION_INDEPENDENT_CODE
  EXE_LINKER_FLAGS(SHARED_LINKER_FLAGS)
  SHARED_LINKER_FLAGS
  STATIC_LINKER_FLAGS
  VERBOSE_MAKEFILE
  ====================================
  CTEST_BUILD_NAME(DASHBOARD_BUILD_NAME)
  CTEST_CHANGE_ID
  CTEST_BUILD_FLAGS
  CTEST_CMAKE_GENERATOR
  CTEST_CONFIGURATION_TYPE
  CTEST_CONFIGURE_COMMAND
  CTEST_COVERAGE_COMMAND
  CTEST_COVERAGE_EXTRA_FLAGS
  CTEST_GIT_COMMAND
  CTEST_MEMORYCHECK_COMMAND
  CTEST_MEMORYCHECK_COMMAND_OPTIONS
  CTEST_MEMORYCHECK_SUPPRESSIONS_FILE
  CTEST_MEMORYCHECK_TYPE
  CTEST_SITE
  CTEST_TEST_TIMEOUT
  CTEST_UPDATE_COMMAND
  CTEST_UPDATE_VERSION_ONLY
  CTEST_USE_LAUNCHERS
  ==================================== >DASHBOARD_
  BUILD_DOCUMENTATION
  LONG_RUNNING_TESTS
  TEST_TIMEOUT_MULTIPLIER
  ==================================== <WITH_ >DASHBOARD_WITH_
  ${DASHBOARD_PACKAGES}
  ====================================
  ")

# Prepare to start build
set(DASHBOARD_CDASH_SERVER "drake-cdash.csail.mit.edu")
set(DASHBOARD_NIGHTLY_START_TIME "00:00:00 EST")

# Build the pre-drake superbuild
execute_step(generic pre-drake)

if(DASHBOARD_SUPERBUILD_FAILURE)
  notice("CTest Status: NOT CONTINUING BECAUSE SUPERBUILD (PRE-DRAKE) WAS NOT SUCCESSFUL")
else()
  # Now start the actual drake build
  execute_step(generic drake)

  if(NOT DASHBOARD_FAILURE)
    # Build the post-drake superbuild
    execute_step(generic post-drake)
  endif()
endif()

# Determine build result
set(DASHBOARD_WARNING OFF)

if(DASHBOARD_FAILURE)
  string(REPLACE ";" " / " DASHBOARD_FAILURES_STRING "${DASHBOARD_FAILURES}")
  set(DASHBOARD_MESSAGE "FAILURE DURING ${DASHBOARD_FAILURES_STRING}")
  file(WRITE "${DASHBOARD_WORKSPACE}/FAILURE")
else()
  format_plural(DASHBOARD_MESSAGE
    ZERO "SUCCESS"
    ONE "SUCCESS BUT WITH 1 BUILD WARNING"
    MANY "SUCCESS BUT WITH # BUILD WARNINGS"
    DASHBOARD_NUMBER_BUILD_WARNINGS)
  if(DASHBOARD_NUMBER_BUILD_WARNINGS GREATER 0)
    set(DASHBOARD_WARNING ON)
  endif()

  set(DASHBOARD_UNSTABLE OFF)
  set(DASHBOARD_UNSTABLES "")

  if(DASHBOARD_WARNING)
    if(COMPILER MATCHES "^((include|link)-what-you-use|scan-build)")
      set(DASHBOARD_UNSTABLE ON)
      list(APPEND DASHBOARD_UNSTABLES "STATIC ANALYSIS TOOL")
    endif()
  endif()

  if(DASHBOARD_TEST AND NOT DASHBOARD_TEST_RETURN_VALUE EQUAL 0)
    set(DASHBOARD_UNSTABLE ON)
    list(APPEND DASHBOARD_UNSTABLES "TEST")
  endif()

  # if(DASHBOARD_COVERAGE AND NOT DASHBOARD_COVERAGE_RETURN_VALUE EQUAL 0)  # FIXME #3269
  #   set(DASHBOARD_UNSTABLE ON)
  #   list(APPEND DASHBOARD_UNSTABLES "COVERAGE TOOL")
  # endif()

  if(DASHBOARD_MEMCHECK AND NOT DASHBOARD_MEMCHECK_RETURN_VALUE EQUAL 0)
    set(DASHBOARD_UNSTABLE ON)
    list(APPEND DASHBOARD_UNSTABLES "MEMCHECK TOOL")
  endif()

  if(DASHBOARD_UNSTABLE)
    string(REPLACE ";" " / " DASHBOARD_UNSTABLES_STRING "${DASHBOARD_UNSTABLES}")
    set(DASHBOARD_MESSAGE
      "UNSTABLE DUE TO ${DASHBOARD_UNSTABLES_STRING} FAILURES")
    file(WRITE "${DASHBOARD_WORKSPACE}/UNSTABLE")
  else()
    file(WRITE "${DASHBOARD_WORKSPACE}/SUCCESS")
  endif()
endif()

# Publish documentation, if requested, and if build succeeded
if(DOCUMENTATION STREQUAL "publish")
  execute_step(generic publish)
endif()

# Report dashboard status
execute_step(common report)

# Touch "warm" file
if(NOT APPLE AND NOT DASHBOARD_WARM)
  file(WRITE "${DASHBOARD_WARM_FILE}")
endif()
